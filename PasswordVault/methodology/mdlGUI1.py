'''
Created on Jul 14, 2015

@author: Daniel Bruce
'''

if __name__ == '__main__':
    pass

""" PasswordApp1x1.py --

 UI generated by GUI Builder Build 146 on 2015-07-14 12:10:27 from:
    D:/Google Drive/My Documents/Github/Python/PasswordStorage/PasswordApp1x1.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

import sys

sys.path.append("./")
from tkinter import *
import numpy
from mdlPasswordAppGUISetup1 import PasswordApp1x1

# BEGIN USER CODE global

# END USER CODE global

class CustomPasswordApp1x1(PasswordApp1x1):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # btnEnterKeyCredentials_command --
    #
    # Callback to handle btnEnterKeyCredentials widget option -command
    def btnEnterKeyCredentials_command(self, *args):
        pass

    # btnModifyVault_command --
    #
    # Callback to handle btnModifyVault widget option -command
    def btnModifyVault_command(self, *args):
        pass

    # btnNewVault_command --
    #
    # Callback to handle btnNewVault widget option -command
    def btnNewVault_command(self, *args):
        pass

    # entPasswordSearch_invalidcommand --
    #
    # Callback to handle entPasswordSearch widget option -invalidcommand
    def entPasswordSearch_invalidcommand(self, *args):
        pass

    # entPasswordSearch_validatecommand --
    #
    # Callback to handle entPasswordSearch widget option -validatecommand
    def entPasswordSearch_validatecommand(self, *args):
        pass

    # entPasswordSearch_xscrollcommand --
    #
    # Callback to handle entPasswordSearch widget option -xscrollcommand
    def entPasswordSearch_xscrollcommand(self, *args):
        pass

    # entVaultText_invalidcommand --
    #
    # Callback to handle entVaultText widget option -invalidcommand
    def entVaultText_invalidcommand(self, *args):
        pass

    # entVaultText_validatecommand --
    #
    # Callback to handle entVaultText widget option -validatecommand
    def entVaultText_validatecommand(self, *args):
        pass

    # entVaultText_xscrollcommand --
    #
    # Callback to handle entVaultText widget option -xscrollcommand
    def entVaultText_xscrollcommand(self, *args):
        pass

    # lstPasswords_xscrollcommand --
    #
    # Callback to handle lstPasswords widget option -xscrollcommand
    def lstPasswords_xscrollcommand(self, *args):
        pass

    # lstPasswords_yscrollcommand --
    #
    # Callback to handle lstPasswords widget option -yscrollcommand
    def lstPasswords_yscrollcommand(self, *args):
        pass

    # lstVaultKeySelector_xscrollcommand --
    #
    # Callback to handle lstVaultKeySelector widget option -xscrollcommand
    def lstVaultKeySelector_xscrollcommand(self, *args):
        pass

    # lstVaultKeySelector_yscrollcommand --
    #
    # Callback to handle lstVaultKeySelector widget option -yscrollcommand
    def lstVaultKeySelector_yscrollcommand(self, *args):
        pass

    # radUsingText_command --
    #
    # Callback to handle radUsingText widget option -command
    def radUsingText_command(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class

    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    try: userinit()
    except NameError: pass
    root = Tk()
    demo = CustomPasswordApp1x1(root)
    root.title('PasswordApp1x1')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()