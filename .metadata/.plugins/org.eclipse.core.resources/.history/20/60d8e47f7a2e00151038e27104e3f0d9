'''
Created on Jul 19, 2015

@author: Daniel Bruce
'''

class SimpleKeyGenerator(object):
	'''
	classdocs
	'''
from methodology.clsBasicKey import BasicKey
from methodology.iKeyGenerator import iKeyGenerator
from methodology.clsBasicBigIntGenerator import BasicBigIntGenerator
from methodology.clsBasicMapInputToIntermediate import BasicMapInputToIntermediate
from methodology.clsBasicMapIntermediateToResult import BasicMapIntermediateToResult

class BasicKeyGenerator(iKeyGenerator):
	'''
	classdocs
	'''

	def __init__(self, pMapInputToIntermediate = SimpleMapInputToIntermediate(), pMapIntermediateToResult = SimpleMapIntermediateToResult()):#pConverter, pStringJoiner, pCombiner):
		'''
		Constructor
		'''
		
		self.mapInputToIntermediate = pMapInputToIntermediate
		self.mapIntermediateToResult = pMapIntermediateToResult
		
# 		self.converter
# 		
# 		self.stringJoiner = pStringJoiner
# 		
# 		self.combiner = pCombiner	
		
	def generateKey(self, pInputPasswordList, pResult):
		
		self.mapInputToIntermediate.defineMap(pInputPasswordList, lclIntermediate)
		self.mapIntermediateToResult.defineMap(lclIntermediate, pResult)
		
		return BasicKey(self.mapInputToIntermediate, self.mapIntermediateToResult)

	def __init__(self, params):
		'''
		Constructor
		'''
		