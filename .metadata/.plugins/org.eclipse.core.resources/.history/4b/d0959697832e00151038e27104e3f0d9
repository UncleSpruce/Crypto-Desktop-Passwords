'''
Created on Jul 19, 2015

@author: Daniel Bruce
'''
from methodology.clsBasicStringJoinerAndCombiner import BasicStringJoinerAndCombiner
from methodology.clsBasicDifferenceMapper import BasicDifferenceMapper
from methodology.clsBasicStringIntConverter import BasicStringIntConverter
from methodology.clsDLPHash import DLPHash

class clsSimpleKey(object):
	'''
	classdocs
	'''
		
	def __init__(self, pJoinerAndCombiner = BasicStringJoinerAndCombiner(), pHash = DLPHash(), pDifferenceMapper = BasicDifferenceMapper(), pConverter = BasicStringIntConverter()):#, pInputToIntermediate = BasicMapInputToIntermediate(), pIntermediateToResult = BasicMapIntermediateToResult()):
		'''
		Constructor
		'''
		self.hash = pHash
		self.joinerAndCombiner = pJoinerAndCombiner
		self.differenceMapper = pDifferenceMapper
		self.converter = pConverter
		
		#self.inputToIntermediate = pInputToIntermediate
		#self.intermediateToResult = pIntermediateToResult
		
	def compute(self, pPasswordList):
		lclJoinedAndCombined = self.joinerAndCombiner.compute(pPasswordList)
		lclHashed = self.hash.compute(lclJoinedAndCombined)
		lclResultAsInt = self.differenceMapper.compute(lclHashed)
		return self.converter.toString(lclResultAsInt)
	
	def toString(self):
		return "(" + self.hash.toString() + "," + self.differenceMapper.toString() + ")"