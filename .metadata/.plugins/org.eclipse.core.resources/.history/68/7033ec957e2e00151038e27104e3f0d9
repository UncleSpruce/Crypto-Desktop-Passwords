'''
Created on Jul 19, 2015

@author: Daniel Bruce
'''
from methodology.clsBasicStringJoinerAndCombiner import BasicStringJoinerAndCombiner
from methodology.clsBasicDifferenceMapper import BasicDifferenceMapper
from methodology.clsDLPHash import DLPHash

	'''
	classdocs
	'''
from methodology.clsBasicKey import BasicKey
from methodology.iKeyGenerator import iKeyGenerator
from methodology.clsBasicBigIntGenerator import BasicBigIntGenerator
from methodology.clsBasicMapInputToIntermediate import BasicMapInputToIntermediate
from methodology.clsBasicMapIntermediateToResult import BasicMapIntermediateToResult

class SimpleKeyGenerator(object):
	'''
	classdocs
	'''

	def __init__(self, pStringJoinerAndCombiner = BasicStringJoinerAndCombiner(), pDifferenceMapper = BasicDifferenceMapper(), pHash = DLPHash())#pMapInputToIntermediate = SimpleMapInputToIntermediate(), pMapIntermediateToResult = SimpleMapIntermediateToResult()):#pConverter, pStringJoiner, pCombiner):
		'''
		Constructor
		'''
		
		self.mapInputToIntermediate = pMapInputToIntermediate
		self.mapIntermediateToResult = pMapIntermediateToResult
		
# 		self.converter
# 		
# 		self.stringJoiner = pStringJoiner
# 		
# 		self.combiner = pCombiner	
		
	def generateKey(self, pInputPasswordList, pResult):
		
		self.mapInputToIntermediate.defineMap(pInputPasswordList, lclIntermediate)
		self.mapIntermediateToResult.defineMap(lclIntermediate, pResult)
		
		return BasicKey(self.mapInputToIntermediate, self.mapIntermediateToResult)

	def __init__(self, params):
		'''
		Constructor
		'''
		