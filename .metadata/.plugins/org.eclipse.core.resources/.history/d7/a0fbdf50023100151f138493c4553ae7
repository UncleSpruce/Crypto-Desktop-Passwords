'''
Created on Jul 23, 2015

@author: Daniel Bruce
'''
from methodology.clsSimpleVault import SimpleVault
from methodology.clsPasswordList import PasswordList
from methodology.clsPasswordTuple import PasswordTuple

class OpenableVault(object):
	'''
	classdocs
	'''
	def __init__(self, pVault = None, pPasswordList = None):
		'''
		Constructor
		'''
		if pVault is None:
			pVault = SimpleVault()
		if pPasswordList is None:
			pPasswordList = PasswordList()
		self.vault = pVault
		self.passwordList = pPasswordList
		
	def addPassword(self, pPasswordTuple):
		if not isinstance(pPasswordTuple, PasswordTuple):
			raise TypeError("Argument passed into append function for PasswordList is not a PasswordTuple.")
		
		self.passwordList.append(pPasswordTuple)
		self.vault.addOutput(pPasswordTuple)
	
	def removePassword(self, pPasswordTuple):
		if not isinstance(pPasswordTuple, PasswordTuple):
			raise TypeError("Argument passed into append function for PasswordList is not a PasswordTuple.")
		self.vault.removeOutput(pPasswordTuple)
	
	def addInput(self, pInputList):
		if not isinstance(pInputList, PasswordList):
			raise TypeError("Argument passed into append function for PasswordList is not a PasswordTuple.")
		self.vault.addInputList(pInputList)
		
	def removeInput(self, pInputList):
		if not isinstance(pInputList, PasswordList):
			raise TypeError("Argument passed into append function for PasswordList is not a PasswordTuple.")		
		self.vault.removeInputList(pInputList)