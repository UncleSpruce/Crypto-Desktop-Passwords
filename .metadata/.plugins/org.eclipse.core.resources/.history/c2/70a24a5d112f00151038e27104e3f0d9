'''
Created on Jul 20, 2015

@author: Daniel Bruce
'''
import unittest
import copy
from methodology.clsSimpleLabelledKeyGenerator import SimpleLabelledKeyGenerator
from methodology.clsPasswordTuple import PasswordTuple
from methodology.clsPasswordList import PasswordList
from methodology.clsSimpleVault import SimpleVault

class testRecoveryUsingSimpleLabelledKey(unittest.TestCase):

	def test_FullFunctionality(self):
		print("Running FullFunctionality test for testRecoveryUsingSimpleLabelledKey.")
		self.defineInputs()
		self.sample1()
		return
	
	def sample1(self):
		vault = SimpleVault()
		vault.append(self.key12t3)
		vault.append(self.key123t4) 
		self.sampleOutcome(vault, self.passwordListA2, self.passwordListA4)
		return
		
	def defineInputs(self):
		self.gen = SimpleLabelledKeyGenerator()
		
		self.lclpwd1 = PasswordTuple("Facebook", "q234")
		self.lclpwd2 = PasswordTuple("Google", "778")
		self.lclpwd3 = PasswordTuple("LinkedIn", "P324")
		self.lclpwd4 = PasswordTuple("Quora", "hjkhkg34")
		self.lclpwd5 = PasswordTuple("Quora", "hjkhkg34")
		self.lclpwd6 = PasswordTuple("Quora", "hjkhkg34")
		
		self.passwordListA1 = PasswordList()
		self.passwordListA1.append(self.lclpwd1)
		
		self.passwordListA2 = PasswordList()
		self.passwordListA2.append(self.lclpwd1)
		self.passwordListA2.append(self.lclpwd2)
		
		self.passwordListA3 = PasswordList()
		self.passwordListA3.append(self.lclpwd1)
		self.passwordListA3.append(self.lclpwd2)
		self.passwordListA3.append(self.lclpwd3)
		
		self.passwordListA4 = PasswordList()
		self.passwordListA4.append(self.lclpwd1)
		self.passwordListA4.append(self.lclpwd2)
		self.passwordListA4.append(self.lclpwd3)
		self.passwordListA4.append(self.lclpwd4)
		
		self.passwordListA5 = PasswordList()
		self.passwordListA5.append(self.lclpwd1)
		self.passwordListA5.append(self.lclpwd2)
		self.passwordListA5.append(self.lclpwd3)
		self.passwordListA5.append(self.lclpwd4)
		self.passwordListA5.append(self.lclpwd5)
		
		self.passwordListA6 = PasswordList()
		self.passwordListA6.append(self.lclpwd1)
		self.passwordListA6.append(self.lclpwd2)
		self.passwordListA6.append(self.lclpwd3)
		self.passwordListA6.append(self.lclpwd4)
		self.passwordListA6.append(self.lclpwd5)
		self.passwordListA6.append(self.lclpwd6)
		
		self.passwordListB4 = PasswordList()
		self.passwordListB4.append(self.lclpwd4)
		self.passwordListB4.append(self.lclpwd5)
		
		self.passwordListB5 = PasswordList()
		self.passwordListB5.append(self.lclpwd4)
		
		self.key12t3 = self.gen.generate(self.passwordListA2, self.lclpwd3)
		self.key123t4 = self.gen.generate(self.passwordListA3, self.lclpwd4)
	
	def sampleOutcome(self, pVault, pInputList, pExpected = -1):
		lclRecoveredList = pVault.recover(pInputList)
		print(lclRecoveredList.toString())
		if pExpected != -1:
			self.assertEqual(pExpected.toString(), lclRecoveredList.toString())
		return
	
# 	def sample1(self):
# 		
# 		lclPasswordList1 = PasswordList()
# 		lclPasswordList1.append(self.lclpwd1)
# 		lclPasswordList1.append(self.lclpwd2)
# 		
# 		
# 		lclKey = self.gen.generate(lclPasswordList1, self.lclpwd3)
# 		print(lclKey)
# 		print(lclKey.toString())
# 		lclVault.append(lclKey)
# 		
# 		#lclPasswordList2 = copy.copy(lclPasswordList1)
# 		lclKey2 = self.gen.generate(lclPasswordList1, self.lclpwd4)
# 		lclVault.append(lclKey2)
# 		
# 		lclRecoveredList1 = lclVault.recover(lclPasswordList1)#lclRecover.recoverList(lclVault, lclPasswordList1)
# 		print(lclRecoveredList1.toString())
# 		
# 		lclPasswordList1.popByIdentifier("Facebook")
# 		lclRecoveredList2 = lclVault.recover(lclPasswordList1)#lclRecover.recoverList(lclVault, lclPasswordList1)
# 		print(lclRecoveredList2.toString())

if __name__ == "__main__":
	#import sys;sys.argv = ['', 'Test.testName']
	unittest.main()