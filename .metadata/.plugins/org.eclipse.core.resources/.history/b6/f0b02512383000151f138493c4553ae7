'''
Created on Jul 22, 2015
@author: Daniel Bruce
'''

from functionality.clsIntermediateVault import IntermediateVault
from methodology.clsBasicBigIntGenerator import BasicBigIntGenerator
from methodology.clsSimpleVault import SimpleVault
from methodology.clsSimpleKeyGenerator import SimpleKeyGenerator

class PivotedVault(object):
	'''
	classdocs
	'''
	def __init__(self, pPasswordList = [], pVault = SimpleVault([]), pIntermediate = BasicBigIntGenerator().generate(), pGenerator = SimpleKeyGenerator()):
		'''
		Constructor
		'''
		self.pivot = pIntermediate
		self.vault = pVault
		
	def addInputList(self, pInputList):
		#super(ControlledIntermediateVault, self).methodName(arguments)
		#super(ControlledIntermediateVault, self)
		
		#Check for duplicates? Or allow them?
		lclKey = self.gen.generate(pInputList, self.pivot)
		return self.vault.append(lclKey)
	
	def removeInputList(self, pInputList):
		lclList = self.vault.getList()
		for i in lclList:
			if i.passwordIdentifierList() == pInputList:
				self.vault.pop(i)
		return
	
	def addOutput(self, pPasswordTuple):
		lclKey = self.gen.generate(self.pivot, pPasswordTuple)
		return self.vault.append(lclKey)
	
	def removeOutput(self, pPasswordTuple):
		lclList = self.vault.getList()
		for i in lclList:
			if i.resultIdentifier() == pPasswordTuple.identifer():
				self.vault.popByName(pPasswordTuple.identifer())		
		return